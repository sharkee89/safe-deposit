{"version":3,"sources":["audio/unlock.wav","audio/error.mp3","audio/button.mp3","components/screen/Screen.js","reducers/safeReducer.js","config/config.js","reducers/screenReducer.js","actions/types.js","reducers/index.js","sagas/saga.js","store/store.js","components/key/Key.js","helper/utils.js","actions/screenAction.js","components/keypad/Keypad.js","actions/testAction.js","components/safe-deposit/SafeDeposit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Screen","className","this","props","screen","on","locked","status","Component","connect","state","initialState","name","Config","keys","id","value","serialNumber","screenStatus","BLANK","ERROR","READY","LOCK","UNLOCK","SERVICE","VALIDATE","SET_PASSWORD","SET_PASSWORD_SUCCESS","SET_PASSWORD_FAIL","screenLocked","serviceUrl","setPasswordCode","serviceCode","progress","serviceMode","setPassword","idleTime","submitTime","action","type","payload","screenMode","combineReducers","safe","screenReducer","changeStatusAsync","watchChangeStatus","bgSync","serviceWork","watchStartServiceWork","setPasswordFinal","watchSetPasswordSuccess","watchSetPasswordFail","watchStartSetPassword","watchBgSyncTask","processInput","watchProcessInput","unlockSuccess","watchUnlockSuccess","unlockFail","watchUnlockFail","checkPassword","startLock","watchStartLock","watchLockSuccess","watchLockFail","lockSuccess","lockFail","lock","rootSaga","lockSound","Audio","lockSoundFile","errorSound","errSoundFile","delay","ms","Promise","res","setTimeout","put","takeLatest","select","getScreenState","length","call","fetch","play","takeEvery","localStorage","setItem","take","fork","bgSyncTask","cancel","getItem","params","all","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","Key","btnSound","soundFile","dispatch","code","passValue","lengthStr","substr","dispatchSetPassword","dispatchLockAsync","lockPress","toString","process","onClick","changeStatus","Keypad","map","key","testAction","then","json","data","SafeDeposit","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1824e39e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unlock.a9294e7b.wav\";","module.exports = __webpack_public_path__ + \"static/media/error.dd18d3ba.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button.111a056b.mp3\";","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport './Screen.scss';\r\n\r\nclass Screen extends Component {\r\n    render() {\r\n        return (\r\n            <div className={(this.props.screen.on ? 'screen screen--on' : 'screen screen--off')}>\r\n                <div className=\"screen__lseg\">\r\n                    {this.props.screen.locked}\r\n                </div>\r\n                <div className=\"screen__mseg\">\r\n                    {this.props.screen.status}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mappStateToProps = state => ({\r\n    screen: state.screen\r\n})\r\n\r\nexport default connect(mappStateToProps, {})(Screen);\r\n","import { TEST_ACTION } from '../actions/types';\r\n\r\nconst initialState = {\r\n    name: []\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TEST_ACTION:\r\n            return {\r\n                ...state,\r\n                name: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","const Config = {\r\n    keys: [\r\n        { id: '7', value: 7 },\r\n        { id: '8', value: 8 },\r\n        { id: '9', value: 9 },\r\n        { id: '4', value: 4 },\r\n        { id: '5', value: 5 },\r\n        { id: '6', value: 6 },\r\n        { id: '1', value: 1 },\r\n        { id: '2', value: 2 },\r\n        { id: '3', value: 3 },\r\n        { id: '*', value: '*' },\r\n        { id: '', value: 0 },\r\n        { id: 'L', value: 'L' }\r\n    ],\r\n    serialNumber: '4815162342',\r\n    screenStatus: {\r\n        BLANK: '',\r\n        ERROR: 'Error',\r\n        READY: 'Ready',\r\n        LOCK: 'Locking...',\r\n        UNLOCK: 'Unlocking...',\r\n        SERVICE: 'Service',\r\n        VALIDATE: 'Validating...',\r\n        SET_PASSWORD: 'Enter new password',\r\n        SET_PASSWORD_SUCCESS: 'Setting new password...',\r\n        SET_PASSWORD_FAIL: 'Password changing error'\r\n    },\r\n    screenLocked: {\r\n        LOCK: 'Locked',\r\n        UNLOCK: 'Unlocked'\r\n    },\r\n    serviceUrl: 'https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code=',\r\n    setPasswordCode: '******',\r\n    serviceCode: '000000'\r\n}\r\n\r\nexport default Config;","import Config from '../config/config';\r\nimport { \r\n    CHANGE_STATUS,\r\n    START_IDLE_TIMING,\r\n    GO_IDLE,\r\n    RESET_SUBMIT_TIME,\r\n    PROCESS_INPUT_ASYNC,\r\n    CHANGE_LOCK,\r\n    UNLOCK_SUCCESS,\r\n    UNLOCK_FAIL,\r\n    LOCK_SUCCESS,\r\n    LOCK_FAIL,\r\n    START_LOCK_ASYNC,\r\n    START_SERVICE,\r\n    START_SET_PASSWORD,\r\n    SET_PASSWORD_SUCCESS,\r\n    SET_PASSWORD_FAIL\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    locked: Config.screenLocked.LOCK,\r\n    status: Config.screenStatus.READY,\r\n    on: false,\r\n    progress: false,\r\n    serviceMode: false,\r\n    setPassword: false,\r\n    idleTime: 0,\r\n    submitTime: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action && action.type) {\r\n        case CHANGE_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.payload,\r\n                on: true\r\n            }\r\n        case START_IDLE_TIMING:\r\n            return {\r\n                ...state,\r\n                progress: true,\r\n                idleTime: 0,\r\n                submitTime: 0\r\n            }\r\n        case GO_IDLE:\r\n            return {\r\n                ...state,\r\n                on: false,\r\n                progress: false,\r\n                status: Config.screenStatus.READY,\r\n                screenMode: false,\r\n                setPassword: false,\r\n                idleTime: 0,\r\n                submitTime: 0\r\n            }\r\n        case RESET_SUBMIT_TIME:\r\n            return {\r\n                ...state,\r\n                submitTime: 0\r\n            }\r\n        case PROCESS_INPUT_ASYNC:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.VALIDATE\r\n            };\r\n        case CHANGE_LOCK:\r\n            return {\r\n                ...state,\r\n                locked: action.payload\r\n            }\r\n        case UNLOCK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.UNLOCK,\r\n                serviceMode: false,\r\n                setPassword: false\r\n            }\r\n        case UNLOCK_FAIL:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.ERROR,\r\n                serviceMode: false,\r\n                setPassword: false\r\n            }\r\n        case START_LOCK_ASYNC:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.VALIDATE\r\n            };\r\n        case LOCK_SUCCESS:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.LOCK\r\n            }\r\n        case LOCK_FAIL:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.ERROR\r\n            }\r\n        case START_SERVICE:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.SERVICE,\r\n                serviceMode: true,\r\n                setPassword: false\r\n            }\r\n        case START_SET_PASSWORD:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.SET_PASSWORD,\r\n                serviceMode: false,\r\n                setPassword: true\r\n            }\r\n        case SET_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.SET_PASSWORD_SUCCESS\r\n            }\r\n        case SET_PASSWORD_FAIL:\r\n            return {\r\n                ...state,\r\n                status: Config.screenStatus.SET_PASSWORD_FAIL\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getScreenState = (state) => state;","export const TEST_ACTION = 'TEST_ACTION';\r\n// Screen Actions\r\nexport const GET_SCREEN_INIT = 'GET_SCREEN_INIT';\r\nexport const CHANGE_STATUS = 'CHANGE_STATUS';\r\nexport const CHANGE_STATUS_ASYNC = 'CHANGE_STATUS_ASYNC';\r\nexport const START_IDLE_TIMING = 'START_IDLE_TIMING';\r\nexport const GO_IDLE = 'GO_IDLE';\r\nexport const RESET_SUBMIT_TIME = 'RESET_SUBMIT_TIME';\r\nexport const PROCESS_INPUT_ASYNC = 'PROCESS_INPUT_ASYNC';\r\nexport const CHANGE_LOCK = 'CHANGE_LOCK';\r\nexport const UNLOCK_SUCCESS = 'UNLOCK_SUCCESS';\r\nexport const UNLOCK_FAIL = 'UNLOCK_FAIL';\r\nexport const LOCK_SUCCESS = 'LOCK_SUCCESS';\r\nexport const LOCK_FAIL = 'LOCK_FAIL';\r\nexport const START_LOCK_ASYNC = 'START_LOCK_ASYNC';\r\nexport const START_SERVICE = 'START_SERVICE';\r\nexport const START_SET_PASSWORD = 'START_SET_PASSWORD';\r\nexport const SET_PASSWORD_SUCCESS = 'SET_PASSWORD_SUCCESS';\r\nexport const SET_PASSWORD_FAIL = 'SET_PASSWORD_FAIL';","import { combineReducers } from 'redux';\r\nimport safeReducer from './safeReducer';\r\nimport screenReducer from './screenReducer';\r\n\r\nexport default combineReducers({\r\n    safe: safeReducer,\r\n    screen: screenReducer\r\n});","import { all, call, cancel, fork, put, select, take, takeEvery, takeLatest } from 'redux-saga/effects';\r\nimport getScreenState from '../reducers/screenReducer';\r\nimport Config from '../config/config';\r\nimport lockSoundFile from '../audio/unlock.wav';\r\nimport errSoundFile from '../audio/error.mp3';\r\n\r\nconst lockSound = new Audio(lockSoundFile);\r\nconst errorSound = new Audio(errSoundFile);\r\n\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\r\n\r\nfunction* changeStatusAsync({ payload }) {\r\n    yield put({ type: 'CHANGE_STATUS', payload: payload });\r\n}\r\n\r\nfunction* watchChangeStatus() {\r\n    yield takeLatest('CHANGE_STATUS_ASYNC', changeStatusAsync);\r\n}\r\n\r\nfunction* bgSync() {\r\n    const state = yield select(getScreenState);\r\n    let idleTime = state.screen.idleTime;\r\n    let submitTime = state.screen.submitTime;\r\n    try {\r\n        yield put({type: 'START_IDLE_TIMING'});\r\n        while (true) {\r\n            idleTime++;\r\n            if (idleTime > 4) {\r\n                idleTime = 0;\r\n                yield put({ type: 'GO_IDLE'});\r\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\r\n            }\r\n            submitTime++;\r\n            if (submitTime > 1 && state.screen.status.length === 6 &&\r\n                state.screen.locked === Config.screenLocked.LOCK && !state.screen.serviceMode &&\r\n                !state.screen.setPassword) {\r\n                yield put({ type: 'RESET_SUBMIT_TIME' });\r\n                yield put({ type: 'PROCESS_INPUT_ASYNC', payload: state.screen.status });\r\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\r\n                \r\n            }\r\n            if (submitTime > 1 && state.screen.serviceMode && state.screen.locked === Config.screenLocked.LOCK) {\r\n                yield put({ type: 'CHANGE_STATUS', payload: Config.screenStatus.VALIDATE });\r\n                yield put({ type: 'START_SERVICE_WORK', payload: state.screen.status });\r\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\r\n            }\r\n            if (submitTime > 1 && state.screen.setPassword) {\r\n                yield put({ type: 'CHANGE_STATUS', payload: Config.screenStatus.VALIDATE });\r\n                yield put({ type: 'START_SET_PASSWORD_WORK', payload: state.screen.status });\r\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\r\n            }\r\n            yield delay(1000)\r\n        }\r\n    } finally {\r\n\r\n    }\r\n}\r\n\r\nfunction* serviceWork({ payload }) {\r\n    yield delay(1500);\r\n    try {\r\n        yield call(fetch, `${Config.serviceUrl}${payload}`);\r\n        lockSound.play();\r\n        yield put({ type: 'UNLOCK_SUCCESS' });\r\n    } catch (e) {\r\n        errorSound.play();\r\n        yield put({ type: 'UNLOCK_FAIL' });\r\n        return;\r\n    }\r\n}\r\n\r\nfunction* watchStartServiceWork() {\r\n    yield takeEvery('START_SERVICE_WORK', serviceWork);\r\n}\r\n\r\nfunction* setPassword({ payload }) {\r\n    yield put({type: 'CHANGE_STATUS', payload: Config.screenStatus.VALIDATE});\r\n    yield delay(1500);\r\n    if (payload.length === 6) {\r\n        localStorage.setItem('password', payload);\r\n        lockSound.play();\r\n        yield put({type: 'SET_PASSWORD_SUCCESS'});    \r\n    } else {\r\n        errorSound.play();\r\n        yield put({type: 'SET_PASSWORD_FAIL'});    \r\n    }\r\n}\r\n\r\nfunction* setPasswordFinal() {\r\n    yield delay(1500);\r\n    yield put({type: 'GO_IDLE'});\r\n}\r\n\r\nfunction* watchSetPasswordSuccess() {\r\n    yield takeEvery('SET_PASSWORD_SUCCESS', setPasswordFinal);\r\n}\r\n\r\nfunction* watchSetPasswordFail() {\r\n    yield takeEvery('SET_PASSWORD_FAIL', setPasswordFinal);\r\n}\r\n\r\nfunction* watchStartSetPassword() {\r\n    yield takeEvery('START_SET_PASSWORD_WORK', setPassword)\r\n}\r\n\r\nfunction* watchBgSyncTask() {\r\n    while (yield take('START_IDLE_TIMING')) {\r\n        const bgSyncTask = yield fork(bgSync)\r\n\r\n        yield take('STOP_BACKGROUND_SYNC')\r\n\r\n        yield cancel(bgSyncTask)\r\n    }\r\n}\r\n\r\nfunction* processInput({ payload }) {\r\n    yield delay(1500);\r\n    if (payload === Config.serviceCode) {\r\n        yield put({ type: 'START_SERVICE' });\r\n        return;\r\n    }\r\n    if (payload === Config.setPasswordCode) {\r\n        yield put({type: 'START_SET_PASSWORD'});\r\n        return;\r\n    }\r\n    yield call(checkPassword, [payload, 'UNLOCK_SUCCESS', 'LOCK_FAIL']);\r\n}\r\n\r\nfunction* watchProcessInput() {\r\n    yield takeEvery('PROCESS_INPUT_ASYNC', processInput);\r\n}\r\n\r\nfunction* unlockSuccess() {\r\n    yield call(lock, [true, Config.screenLocked.UNLOCK]);\r\n}\r\n\r\nfunction* watchUnlockSuccess() {\r\n    yield takeEvery('UNLOCK_SUCCESS', unlockSuccess);\r\n}\r\n\r\nfunction* unlockFail() {\r\n    yield call(lock, [false, Config.screenLocked.UNLOCK]);\r\n}\r\n\r\nfunction* watchUnlockFail() {\r\n    yield takeEvery('UNLOCK_FAIL', unlockFail);\r\n}\r\n\r\nfunction* checkPassword(payload) {\r\n    if (payload[0] === localStorage.getItem('password')) {\r\n        lockSound.play();\r\n        yield put({ type: payload[1] });\r\n    } else {\r\n        errorSound.play();\r\n        yield put({ type: payload[2] });\r\n    }\r\n}\r\n\r\nfunction* startLock({ payload }) {\r\n    yield delay(1500);\r\n    if (payload.length !== 6) {\r\n        errorSound.play();\r\n        yield put({ type: 'LOCK_FAIL' });\r\n        return;\r\n    }\r\n    yield call(checkPassword, [payload, 'LOCK_SUCCESS', 'LOCK_FAIL']);\r\n}\r\n\r\nfunction* watchStartLock() {\r\n    yield takeEvery('START_LOCK_ASYNC', startLock)\r\n}\r\n\r\nfunction* watchLockSuccess() {\r\n    yield takeEvery('LOCK_SUCCESS', lockSuccess);\r\n}\r\n\r\nfunction* watchLockFail() {\r\n    yield takeEvery('LOCK_FAIL', lockFail);\r\n}\r\n\r\nfunction* lockSuccess() {\r\n    yield call(lock, [true, Config.screenLocked.LOCK]);\r\n}\r\n\r\nfunction* lockFail() {\r\n    yield call(lock, [false, Config.screenLocked.LOCK]);\r\n}\r\n\r\nfunction* lock(params) {\r\n    yield delay(1500);\r\n    if (params[0]) {\r\n        yield put({type: 'CHANGE_LOCK', payload: params[1]});\r\n    }\r\n    yield put({type: 'GO_IDLE'});\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchChangeStatus(),\r\n        watchBgSyncTask(),\r\n        watchProcessInput(),\r\n        watchUnlockSuccess(),\r\n        watchUnlockFail(),\r\n        watchStartLock(),\r\n        watchLockSuccess(),\r\n        watchLockFail(),\r\n        watchStartServiceWork(),\r\n        watchStartSetPassword(),\r\n        watchSetPasswordSuccess(),\r\n        watchSetPasswordFail()\r\n    ])\r\n}","import { applyMiddleware, createStore, compose } from 'redux';\r\nimport rootReducer from '../reducers';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas/saga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(sagaMiddleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport const action = type => store.dispatch({type});\r\n\r\nexport default store;","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store/store';\r\nimport Config from '../../config/config';\r\nimport { changeStatus } from '../../actions/screenAction';\r\nimport { isStatusNumber } from '../../helper/utils';\r\nimport './Key.scss';\r\nimport soundFile from '../../audio/button.mp3';\r\n\r\nclass Key extends Component {\r\n\r\n    btnSound = new Audio(soundFile);\r\n\r\n    dispatchSetPassword() {\r\n        store.dispatch({ type: 'START_SET_PASSWORD'});\r\n        store.dispatch({ type: 'STOP_BACKGROUND_SYNC' });\r\n    }\r\n\r\n    dispatchLockAsync(code) {\r\n        store.dispatch({ type: 'START_LOCK_ASYNC', payload: code});\r\n        store.dispatch({ type: 'STOP_BACKGROUND_SYNC' });\r\n    }\r\n\r\n    process(passValue) {\r\n        this.btnSound.play();\r\n        store.dispatch({ type: 'STOP_BACKGROUND_SYNC' });\r\n        store.dispatch({ type: 'CHANGE_STATUS_ASYNC', payload: passValue });\r\n        store.dispatch({ type: 'START_IDLE_TIMING' });\r\n    }\r\n\r\n    lockPress() {\r\n        this.btnSound.play();\r\n        const lengthStr = this.props.screen.status.length > 6 ? 6 : this.props.screen.status.length;\r\n        const code = this.props.screen.status.substr(0, lengthStr);\r\n        if (code === Config.setPasswordCode) {\r\n            this.dispatchSetPassword();            \r\n        } else if (this.props.screen.locked === Config.screenLocked.UNLOCK) {\r\n            this.dispatchLockAsync(code);            \r\n        }\r\n        return;\r\n    }\r\n\r\n    changeStatus(value) {\r\n        if (\r\n            this.props.screen.status !== Config.screenStatus.VALIDATE &&\r\n            this.props.screen.status !== Config.screenStatus.ERROR &&\r\n            this.props.screen.status !== Config.screenStatus.UNLOCK\r\n        ) {\r\n            if (value === 'L') {\r\n                this.lockPress();\r\n            }\r\n            let passValue = isStatusNumber(this.props.screen.status) ? value : this.props.screen.status += value.toString();\r\n            if (!this.props.screen.serviceMode) {\r\n                if (passValue.length > 6) {} else {this.process(passValue)}\r\n            } else {\r\n                this.process(passValue);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <button className=\"key\" onClick={() => this.changeStatus(this.props.value)}>\r\n                {this.props.value}\r\n            </button>\r\n        )\r\n    }\r\n}\r\nconst mappStateToProps = state => ({\r\n    screen: state.screen\r\n})\r\n\r\nexport default connect(mappStateToProps, { changeStatus })(Key);","import Config from '../config/config';\r\n\r\nexport function isStatusNumber (status) {\r\n    return status === Config.screenStatus.BLANK ||\r\n        status === Config.screenStatus.ERROR ||\r\n        status === Config.screenStatus.LOCK ||\r\n        status === Config.screenStatus.READY ||\r\n        status === Config.screenStatus.SERVICE ||\r\n        status === Config.screenStatus.UNLOCK ||\r\n        status === Config.screenStatus.VALIDATE ||\r\n        status === Config.screenStatus.SET_PASSWORD;\r\n}","import { GET_SCREEN_INIT, CHANGE_STATUS } from './types';\r\n\r\nexport const getScreenInit = () => dispatch => {\r\n    dispatch({\r\n        type: GET_SCREEN_INIT\r\n    });\r\n}\r\n\r\nexport const changeStatus = (value) => dispatch => {\r\n    dispatch({\r\n        type: CHANGE_STATUS,\r\n        payload: value\r\n    });\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Keypad.scss';\r\nimport Key from '../key/Key';\r\nimport Config from '../../config/config';\r\nimport { connect } from 'react-redux';\r\nimport { testAction } from '../../actions/testAction';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Keypad extends Component {\r\n    state = {\r\n        keys: Config.keys\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"keypad\">\r\n                {this.state.keys.map((key) => {\r\n                    return <Key key={key.id} value={key.value}/>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nKeypad.propTypes = {\r\n    testAction: PropTypes.func.isRequired,\r\n    safe: PropTypes.array.isRequired\r\n}\r\n\r\nconst mappStateToProps = state => ({\r\n    safe: state.safe.name\r\n})\r\n\r\nexport default connect(mappStateToProps, { testAction })(Keypad);","import { TEST_ACTION } from './types';\r\n\r\nexport const testAction = () => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/todos')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: TEST_ACTION,\r\n            payload: data\r\n        })\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport Screen from '../screen/Screen';\r\nimport Keypad from '../keypad/Keypad';\r\nimport './SafeDeposit.scss';\r\nimport Config from '../../config/config';\r\n\r\nexport default class SafeDeposit extends Component {\r\n    state = {\r\n        serialNumber: Config.serialNumber\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"safe-deposit\">\r\n                <Screen />\r\n                <Keypad />\r\n                <div className=\"safe-deposit__serial-number\">\r\n                    S/N: {this.state.serialNumber}\r\n                </div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n ","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport './App.scss';\r\nimport SafeDeposit from './components/safe-deposit/SafeDeposit';\r\nimport store from './store/store';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <SafeDeposit />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}