{"version":3,"sources":["audio/unlock.wav","audio/error.mp3","audio/button.mp3","components/screen/Screen.js","config/config.js","reducers/screenReducer.js","actions/types.js","reducers/index.js","sagas/saga.js","store/store.js","components/key/Key.js","helper/utils.js","components/keypad/Keypad.js","components/safe-deposit/SafeDeposit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Screen","className","this","props","screen","on","locked","status","length","Component","connect","state","Config","keys","id","value","keyCodes","1","position","2","3","4","5","6","7","8","9","0","serialNumber","screenStatus","BLANK","ERROR","READY","LOCK","UNLOCK","SERVICE","VALIDATE","SET_PASSWORD","SET_PASSWORD_SUCCESS","SET_PASSWORD_FAIL","screenLocked","serviceUrl","setPasswordCode","serviceCode","initialState","progress","serviceMode","setPassword","idleTime","submitTime","action","type","payload","screenMode","combineReducers","screenReducer","changeStatusAsync","watchChangeStatus","bgSync","serviceWork","watchStartServiceWork","setPasswordFinal","watchSetPasswordSuccess","watchSetPasswordFail","watchStartSetPassword","watchBgSyncTask","processInput","watchProcessInput","unlockSuccess","watchUnlockSuccess","unlockFail","watchUnlockFail","checkPassword","startLock","watchStartLock","watchLockSuccess","watchLockFail","lockSuccess","lockFail","lock","rootSaga","lockSound","Audio","lockSoundFile","errorSound","errSoundFile","delay","ms","Promise","res","setTimeout","put","takeLatest","select","getScreenState","call","fetch","play","takeEvery","localStorage","setItem","take","fork","bgSyncTask","cancel","getItem","params","all","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","run","Key","btnSound","soundFile","dispatch","code","passValue","lengthStr","substr","dispatchSetPassword","dispatchLockAsync","lockPress","toString","process","onClick","changeStatus","Keypad","event","key","document","querySelectorAll","click","addEventListener","onKeyPress","map","SafeDeposit","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00446b2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unlock.a9294e7b.wav\";","module.exports = __webpack_public_path__ + \"static/media/error.dd18d3ba.mp3\";","module.exports = __webpack_public_path__ + \"static/media/button.111a056b.mp3\";","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport './Screen.scss';\n\nclass Screen extends Component {\n    render() {\n        return (\n            <div className={\"screen \" + (this.props.screen.on ? ' screen--on' : ' screen--off')}>\n                <div className=\"screen__lseg\">\n                    {this.props.screen.locked}\n                </div>\n                <div className={\"screen__mseg\" + (this.props.screen.status.length >= 10 && this.props.screen.status.length < 17 ? ' screen__mseg--small' : this.props.screen.status.length >= 17 ? ' screen__mseg--extra-small' : '')}>\n                    {this.props.screen.status}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mappStateToProps = state => ({\n    screen: state.screen\n})\n\nexport default connect(mappStateToProps, {})(Screen);\n","const Config = {\n    keys: [\n        { id: '7', value: 7 },\n        { id: '8', value: 8 },\n        { id: '9', value: 9 },\n        { id: '4', value: 4 },\n        { id: '5', value: 5 },\n        { id: '6', value: 6 },\n        { id: '1', value: 1 },\n        { id: '2', value: 2 },\n        { id: '3', value: 3 },\n        { id: '*', value: '*' },\n        { id: '', value: 0 },\n        { id: 'L', value: 'L' }\n    ],\n    keyCodes: {\n        1: {value: 1, position: 6},\n        2: {value: 2, position: 7},\n        3: {value: 3, position: 8},\n        4: {value: 4, position: 3},\n        5: {value: 5, position: 4},\n        6: {value: 6, position: 5},\n        7: {value: 7, position: 0},\n        8: {value: 8, position: 1},\n        9: {value: 9, position: 2},\n        '*': {value: '*', position: 9},\n        0: {value: 0, position: 10},\n        'l': {value: 'L', position: 11}\n    },\n    serialNumber: '4815162342',\n    screenStatus: {\n        BLANK: '',\n        ERROR: 'Error',\n        READY: 'Ready',\n        LOCK: 'Locking...',\n        UNLOCK: 'Unlocking...',\n        SERVICE: 'Service',\n        VALIDATE: 'Validating...',\n        SET_PASSWORD: 'Enter new password',\n        SET_PASSWORD_SUCCESS: 'Setting new password...',\n        SET_PASSWORD_FAIL: 'Password changing error'\n    },\n    screenLocked: {\n        LOCK: 'Locked',\n        UNLOCK: 'Unlocked'\n    },\n    serviceUrl: 'https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code=',\n    setPasswordCode: '******',\n    serviceCode: '000000'\n}\n\nexport default Config;","import Config from '../config/config';\nimport { \n    CHANGE_STATUS,\n    START_IDLE_TIMING,\n    GO_IDLE,\n    RESET_SUBMIT_TIME,\n    PROCESS_INPUT_ASYNC,\n    CHANGE_LOCK,\n    UNLOCK_SUCCESS,\n    UNLOCK_FAIL,\n    LOCK_SUCCESS,\n    LOCK_FAIL,\n    START_LOCK_ASYNC,\n    START_SERVICE,\n    START_SET_PASSWORD,\n    SET_PASSWORD_SUCCESS,\n    SET_PASSWORD_FAIL\n} from '../actions/types';\n\nconst initialState = {\n    locked: Config.screenLocked.LOCK,\n    status: Config.screenStatus.READY,\n    on: false,\n    progress: false,\n    serviceMode: false,\n    setPassword: false,\n    idleTime: 0,\n    submitTime: 0\n}\n\nexport default (state = initialState, action) => {\n    switch (action && action.type) {\n        case CHANGE_STATUS:\n            return {\n                ...state,\n                status: action.payload,\n                on: true\n            }\n        case START_IDLE_TIMING:\n            return {\n                ...state,\n                progress: true,\n                idleTime: 0,\n                submitTime: 0\n            }\n        case GO_IDLE:\n            return {\n                ...state,\n                on: false,\n                progress: false,\n                status: Config.screenStatus.READY,\n                screenMode: false,\n                setPassword: false,\n                idleTime: 0,\n                submitTime: 0\n            }\n        case RESET_SUBMIT_TIME:\n            return {\n                ...state,\n                submitTime: 0\n            }\n        case PROCESS_INPUT_ASYNC:\n            return {\n                ...state,\n                status: Config.screenStatus.VALIDATE\n            };\n        case CHANGE_LOCK:\n            return {\n                ...state,\n                locked: action.payload\n            }\n        case UNLOCK_SUCCESS:\n            return {\n                ...state,\n                status: Config.screenStatus.UNLOCK,\n                serviceMode: false,\n                setPassword: false\n            }\n        case UNLOCK_FAIL:\n            return {\n                ...state,\n                status: Config.screenStatus.ERROR,\n                serviceMode: false,\n                setPassword: false\n            }\n        case START_LOCK_ASYNC:\n            return {\n                ...state,\n                status: Config.screenStatus.VALIDATE\n            };\n        case LOCK_SUCCESS:\n            return {\n                ...state,\n                status: Config.screenStatus.LOCK\n            }\n        case LOCK_FAIL:\n            return {\n                ...state,\n                status: Config.screenStatus.ERROR\n            }\n        case START_SERVICE:\n            return {\n                ...state,\n                status: Config.screenStatus.SERVICE,\n                serviceMode: true,\n                setPassword: false\n            }\n        case START_SET_PASSWORD:\n            return {\n                ...state,\n                status: Config.screenStatus.SET_PASSWORD,\n                serviceMode: false,\n                setPassword: true\n            }\n        case SET_PASSWORD_SUCCESS:\n            return {\n                ...state,\n                status: Config.screenStatus.SET_PASSWORD_SUCCESS\n            }\n        case SET_PASSWORD_FAIL:\n            return {\n                ...state,\n                status: Config.screenStatus.SET_PASSWORD_FAIL\n            }\n        default:\n            return state;\n    }\n}\n\nexport const getScreenState = (state) => state;","// Screen Actions\nexport const GET_SCREEN_INIT = 'GET_SCREEN_INIT';\nexport const CHANGE_STATUS = 'CHANGE_STATUS';\nexport const CHANGE_STATUS_ASYNC = 'CHANGE_STATUS_ASYNC';\nexport const START_IDLE_TIMING = 'START_IDLE_TIMING';\nexport const GO_IDLE = 'GO_IDLE';\nexport const RESET_SUBMIT_TIME = 'RESET_SUBMIT_TIME';\nexport const PROCESS_INPUT_ASYNC = 'PROCESS_INPUT_ASYNC';\nexport const CHANGE_LOCK = 'CHANGE_LOCK';\nexport const UNLOCK_SUCCESS = 'UNLOCK_SUCCESS';\nexport const UNLOCK_FAIL = 'UNLOCK_FAIL';\nexport const LOCK_SUCCESS = 'LOCK_SUCCESS';\nexport const LOCK_FAIL = 'LOCK_FAIL';\nexport const START_LOCK_ASYNC = 'START_LOCK_ASYNC';\nexport const START_SERVICE = 'START_SERVICE';\nexport const START_SET_PASSWORD = 'START_SET_PASSWORD';\nexport const SET_PASSWORD_SUCCESS = 'SET_PASSWORD_SUCCESS';\nexport const SET_PASSWORD_FAIL = 'SET_PASSWORD_FAIL';","import { combineReducers } from 'redux';\nimport screenReducer from './screenReducer';\n\nexport default combineReducers({\n    screen: screenReducer\n});","import { all, call, cancel, fork, put, select, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport getScreenState from '../reducers/screenReducer';\nimport Config from '../config/config';\nimport lockSoundFile from '../audio/unlock.wav';\nimport errSoundFile from '../audio/error.mp3';\n\nconst lockSound = new Audio(lockSoundFile);\nconst errorSound = new Audio(errSoundFile);\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\nfunction* changeStatusAsync({ payload }) {\n    yield put({ type: 'CHANGE_STATUS', payload: payload });\n}\n\nfunction* watchChangeStatus() {\n    yield takeLatest('CHANGE_STATUS_ASYNC', changeStatusAsync);\n}\n\nfunction* bgSync() {\n    const state = yield select(getScreenState);\n    let idleTime = state.screen.idleTime;\n    let submitTime = state.screen.submitTime;\n    try {\n        yield put({type: 'START_IDLE_TIMING'});\n        while (true) {\n            idleTime++;\n            if (idleTime > 4) {\n                idleTime = 0;\n                yield put({ type: 'GO_IDLE'});\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\n            }\n            submitTime++;\n            if (submitTime > 1 && state.screen.status.length === 6 &&\n                state.screen.locked === Config.screenLocked.LOCK && !state.screen.serviceMode &&\n                !state.screen.setPassword) {\n                yield put({ type: 'RESET_SUBMIT_TIME' });\n                yield put({ type: 'PROCESS_INPUT_ASYNC', payload: state.screen.status });\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\n                \n            }\n            if (submitTime > 1 && state.screen.serviceMode && state.screen.locked === Config.screenLocked.LOCK) {\n                yield put({ type: 'CHANGE_STATUS', payload: Config.screenStatus.VALIDATE });\n                yield put({ type: 'START_SERVICE_WORK', payload: state.screen.status });\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\n            }\n            if (submitTime > 1 && state.screen.setPassword) {\n                yield put({ type: 'CHANGE_STATUS', payload: Config.screenStatus.VALIDATE });\n                yield put({ type: 'START_SET_PASSWORD_WORK', payload: state.screen.status });\n                yield put({ type: 'STOP_BACKGROUND_SYNC' });\n            }\n            yield delay(1000)\n        }\n    } finally {\n\n    }\n}\n\nfunction* serviceWork({ payload }) {\n    yield delay(1500);\n    try {\n        yield call(fetch, `${Config.serviceUrl}${payload}`);\n        lockSound.play();\n        yield put({ type: 'UNLOCK_SUCCESS' });\n    } catch (e) {\n        errorSound.play();\n        yield put({ type: 'UNLOCK_FAIL' });\n        return;\n    }\n}\n\nfunction* watchStartServiceWork() {\n    yield takeEvery('START_SERVICE_WORK', serviceWork);\n}\n\nfunction* setPassword({ payload }) {\n    yield put({type: 'CHANGE_STATUS', payload: Config.screenStatus.VALIDATE});\n    yield delay(1500);\n    if (payload.length === 6) {\n        localStorage.setItem('password', payload);\n        lockSound.play();\n        yield put({type: 'SET_PASSWORD_SUCCESS'});    \n    } else {\n        errorSound.play();\n        yield put({type: 'SET_PASSWORD_FAIL'});    \n    }\n}\n\nfunction* setPasswordFinal() {\n    yield delay(1500);\n    yield put({type: 'GO_IDLE'});\n}\n\nfunction* watchSetPasswordSuccess() {\n    yield takeEvery('SET_PASSWORD_SUCCESS', setPasswordFinal);\n}\n\nfunction* watchSetPasswordFail() {\n    yield takeEvery('SET_PASSWORD_FAIL', setPasswordFinal);\n}\n\nfunction* watchStartSetPassword() {\n    yield takeEvery('START_SET_PASSWORD_WORK', setPassword)\n}\n\nfunction* watchBgSyncTask() {\n    while (yield take('START_IDLE_TIMING')) {\n        const bgSyncTask = yield fork(bgSync)\n\n        yield take('STOP_BACKGROUND_SYNC')\n\n        yield cancel(bgSyncTask)\n    }\n}\n\nfunction* processInput({ payload }) {\n    yield delay(1500);\n    if (payload === Config.serviceCode) {\n        yield put({ type: 'START_SERVICE' });\n        return;\n    }\n    if (payload === Config.setPasswordCode) {\n        yield put({type: 'START_SET_PASSWORD'});\n        return;\n    }\n    yield call(checkPassword, [payload, 'UNLOCK_SUCCESS', 'LOCK_FAIL']);\n}\n\nfunction* watchProcessInput() {\n    yield takeEvery('PROCESS_INPUT_ASYNC', processInput);\n}\n\nfunction* unlockSuccess() {\n    yield call(lock, [true, Config.screenLocked.UNLOCK]);\n}\n\nfunction* watchUnlockSuccess() {\n    yield takeEvery('UNLOCK_SUCCESS', unlockSuccess);\n}\n\nfunction* unlockFail() {\n    yield call(lock, [false, Config.screenLocked.UNLOCK]);\n}\n\nfunction* watchUnlockFail() {\n    yield takeEvery('UNLOCK_FAIL', unlockFail);\n}\n\nfunction* checkPassword(payload) {\n    if (payload[0] === localStorage.getItem('password')) {\n        lockSound.play();\n        yield put({ type: payload[1] });\n    } else {\n        errorSound.play();\n        yield put({ type: payload[2] });\n    }\n}\n\nfunction* startLock({ payload }) {\n    yield delay(1500);\n    if (payload.length !== 6) {\n        errorSound.play();\n        yield put({ type: 'LOCK_FAIL' });\n        return;\n    }\n    yield call(checkPassword, [payload, 'LOCK_SUCCESS', 'LOCK_FAIL']);\n}\n\nfunction* watchStartLock() {\n    yield takeEvery('START_LOCK_ASYNC', startLock)\n}\n\nfunction* watchLockSuccess() {\n    yield takeEvery('LOCK_SUCCESS', lockSuccess);\n}\n\nfunction* watchLockFail() {\n    yield takeEvery('LOCK_FAIL', lockFail);\n}\n\nfunction* lockSuccess() {\n    yield call(lock, [true, Config.screenLocked.LOCK]);\n}\n\nfunction* lockFail() {\n    yield call(lock, [false, Config.screenLocked.LOCK]);\n}\n\nfunction* lock(params) {\n    yield delay(1500);\n    if (params[0]) {\n        yield put({type: 'CHANGE_LOCK', payload: params[1]});\n    }\n    yield put({type: 'GO_IDLE'});\n}\n\nexport default function* rootSaga() {\n    yield all([\n        watchChangeStatus(),\n        watchBgSyncTask(),\n        watchProcessInput(),\n        watchUnlockSuccess(),\n        watchUnlockFail(),\n        watchStartLock(),\n        watchLockSuccess(),\n        watchLockFail(),\n        watchStartServiceWork(),\n        watchStartSetPassword(),\n        watchSetPasswordSuccess(),\n        watchSetPasswordFail()\n    ])\n}","import { applyMiddleware, createStore, compose } from 'redux';\nimport rootReducer from '../reducers';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas/saga';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(sagaMiddleware)\n    )\n)\nsagaMiddleware.run(rootSaga);\n\nexport const action = type => store.dispatch({type});\n\nexport default store;","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport store from '../../store/store';\nimport Config from '../../config/config';\nimport { isStatusNumber } from '../../helper/utils';\nimport './Key.scss';\nimport soundFile from '../../audio/button.mp3';\n\nclass Key extends Component {\n\n    btnSound = new Audio(soundFile);\n\n    dispatchSetPassword() {\n        store.dispatch({ type: 'START_SET_PASSWORD'});\n        store.dispatch({ type: 'STOP_BACKGROUND_SYNC' });\n    }\n\n    dispatchLockAsync(code) {\n        store.dispatch({ type: 'START_LOCK_ASYNC', payload: code});\n        store.dispatch({ type: 'STOP_BACKGROUND_SYNC' });\n    }\n\n    process(passValue) {\n        this.btnSound.play();\n        store.dispatch({ type: 'STOP_BACKGROUND_SYNC' });\n        store.dispatch({ type: 'CHANGE_STATUS_ASYNC', payload: passValue });\n        store.dispatch({ type: 'START_IDLE_TIMING' });\n    }\n\n    lockPress() {\n        this.btnSound.play();\n        const lengthStr = this.props.screen.status.length > 6 ? 6 : this.props.screen.status.length;\n        const code = this.props.screen.status.substr(0, lengthStr);\n        if (code === Config.setPasswordCode) {\n            this.dispatchSetPassword();            \n        } else if (this.props.screen.locked === Config.screenLocked.UNLOCK) {\n            this.dispatchLockAsync(code);            \n        }\n        return;\n    }\n\n    changeStatus(value) {\n        if (\n            this.props.screen.status !== Config.screenStatus.VALIDATE &&\n            this.props.screen.status !== Config.screenStatus.ERROR &&\n            this.props.screen.status !== Config.screenStatus.UNLOCK\n        ) {\n            if (value === 'L') {\n                this.lockPress();\n            }\n            let passValue = isStatusNumber(this.props.screen.status) ? value : this.props.screen.status += value.toString();\n            if (!this.props.screen.serviceMode) {\n                if (passValue.length > 6) {} else {this.process(passValue)}\n            } else {\n                this.process(passValue);\n            }\n        }\n    }\n    render() {\n        return (\n            <button className=\"key\" onClick={() => this.changeStatus(this.props.value)}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\nconst mappStateToProps = state => ({\n    screen: state.screen\n})\n\nexport default connect(mappStateToProps, { })(Key);","import Config from '../config/config';\n\nexport function isStatusNumber (status) {\n    return status === Config.screenStatus.BLANK ||\n        status === Config.screenStatus.ERROR ||\n        status === Config.screenStatus.LOCK ||\n        status === Config.screenStatus.READY ||\n        status === Config.screenStatus.SERVICE ||\n        status === Config.screenStatus.UNLOCK ||\n        status === Config.screenStatus.VALIDATE ||\n        status === Config.screenStatus.SET_PASSWORD;\n}","import React, { Component } from 'react'\nimport Key from '../key/Key';\nimport Config from '../../config/config';\nimport './Keypad.scss';\n\nexport default class Keypad extends Component {\n    state = {\n        keys: Config.keys\n    }\n    onKeyPress(event) {\n        const position = Config.keyCodes[event.key] && Config.keyCodes[event.key].position;\n        const keys = document.querySelectorAll('.key');\n        if (keys[position]) {\n            keys[position].click();\n        }\n    }\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.onKeyPress, false);\n    }\n    render() {\n        return (\n            <div className=\"keypad\">\n                {this.state.keys.map((key) => {\n                    return <Key key={key.id} value={key.value}/>\n                })}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Screen from '../screen/Screen';\nimport Keypad from '../keypad/Keypad';\nimport Config from '../../config/config';\nimport './SafeDeposit.scss';\n\nexport default class SafeDeposit extends Component {\n    state = {\n        serialNumber: Config.serialNumber\n    }\n    render() {\n        return (\n            <div className=\"safe-deposit\">\n                <Screen />\n                <Keypad />\n                <div className=\"safe-deposit__serial-number\">\n                    S/N: {this.state.serialNumber}\n                </div> \n            </div>\n        )\n    }\n}\n ","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport SafeDeposit from './components/safe-deposit/SafeDeposit';\nimport store from './store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <SafeDeposit />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}